"use client";

import { openDB, DBSchema } from 'idb';

const DB_NAME = 'image-viewer-db';
const STORE_NAME = 'images';
const DB_VERSION = 2; // Incremented version to trigger schema upgrade

interface MyDB extends DBSchema {
  [STORE_NAME]: {
    key: number; // Keys are now auto-incrementing numbers
    value: File;
  };
}

async function getDb() {
  return openDB<MyDB>(DB_NAME, DB_VERSION, {
    upgrade(db, oldVersion) {
      // This runs if the user has an older version of the DB, or no DB.
      // We are migrating from a schema that used a potentially non-unique string key
      // to one that uses auto-incrementing numbers.
      if (oldVersion < 2) {
        // To be safe, we delete the old object store if it exists and create a new one.
        if (db.objectStoreNames.contains(STORE_NAME)) {
          db.deleteObjectStore(STORE_NAME);
        }
        db.createObjectStore(STORE_NAME, { autoIncrement: true });
      }
    },
  });
}

export async function storeImages(files: File[]) {
  const db = await getDb();
  const tx = db.transaction(STORE_NAME, 'readwrite');
  // Clear existing images before adding new ones to ensure a fresh state.
  await tx.store.clear();
  // Use Promise.all to add all files in a single transaction.
  // The keys will be auto-generated by IndexedDB.
  await Promise.all(files.map(file => tx.store.put(file)));
  await tx.done;
}

export async function getStoredImages(): Promise<File[]> {
  const db = await getDb();
  return db.getAll(STORE_NAME);
}

export async function clearImages() {
  const db = await getDb();
  await db.clear(STORE_NAME);
}